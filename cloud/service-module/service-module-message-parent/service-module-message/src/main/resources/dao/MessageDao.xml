<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.iomc.forum.message.dao.MessageDao">

    <!-- 消息VO结果映射 -->
    <resultMap id="MessageVOMap" type="com.iomc.forum.message.api.vo.MessageVO">
        <id column="id" property="id"/>
        <result column="type" property="type"/>
        <result column="content" property="content"/>
        <result column="from_user_id" property="fromUserId"/>
        <result column="from_user_name" property="fromUserName"/>
        <result column="from_user_avatar" property="fromUserAvatar"/>
        <result column="target_type" property="targetType"/>
        <result column="target_id" property="targetId"/>
        <result column="topic_id" property="topicId"/>
        <result column="is_read" property="isRead"/>
        <result column="status" property="status"/>
        <result column="created_at" property="createdAt"/>
        <association property="quote" javaType="com.iomc.forum.message.api.vo.MessageQuoteVO">
            <result column="quote_title" property="title"/>
            <result column="quote_content" property="content"/>
            <result column="quote_type" property="type"/>
        </association>
    </resultMap>

    <!-- 分页查询用户消息 -->
    <select id="selectMessagePage" resultMap="MessageVOMap">
        SELECT 
            m.id,
            CASE 
                WHEN m.type = 0 THEN 'like'
                WHEN m.type = 1 THEN 'comment'
                WHEN m.type = 2 THEN 'follow'
                WHEN m.type = 3 THEN 'system'
                ELSE 'other'
            END as type,
            m.content,
            m.from_user_id,
            u.nickname as from_user_name,
            u.avatar as from_user_avatar,
            CASE 
                WHEN m.target_type = 0 THEN 'topic'
                WHEN m.target_type = 1 THEN 'comment'
                ELSE 'other'
            END as target_type,
            m.target_id,
            m.topic_id,
            m.is_read,
            m.status,
            m.created_at,
            CASE 
                WHEN m.target_type = 0 THEN t.title
                WHEN m.target_type = 1 THEN LEFT(c.content, 50)
                ELSE NULL
            END as quote_title,
            CASE 
                WHEN m.target_type = 0 THEN LEFT(t.content, 100)
                WHEN m.target_type = 1 THEN c.content
                ELSE NULL
            END as quote_content,
            CASE 
                WHEN m.target_type = 0 THEN 'topic'
                WHEN m.target_type = 1 THEN 'comment'
                ELSE 'other'
            END as quote_type
        FROM message m
        LEFT JOIN users u ON m.from_user_id = u.id
        LEFT JOIN topics t ON m.target_id = t.id AND m.target_type = 0
        LEFT JOIN comments c ON m.target_id = c.id AND m.target_type = 1
        WHERE m.to_user_id = #{userId}
        AND m.status = 1
        <if test="type != null and type != ''">
            <choose>
                <when test="type == 'like'">
                    AND m.type = 0
                </when>
                <when test="type == 'comment'">
                    AND m.type = 1
                </when>
                <when test="type == 'system'">
                    AND m.type = 3
                </when>
            </choose>
        </if>
        <if test="isRead != null">
            AND m.is_read = #{isRead}
        </if>
        ORDER BY m.created_at DESC
    </select>

    <!-- 获取用户未读消息统计 -->
    <select id="selectUnreadCounts" resultType="java.util.Map">
        SELECT 
            COUNT(*) as all_count,
            SUM(CASE WHEN type = 0 THEN 1 ELSE 0 END) as like_count,
            SUM(CASE WHEN type = 1 THEN 1 ELSE 0 END) as comment_count,
            SUM(CASE WHEN type = 3 THEN 1 ELSE 0 END) as system_count
        FROM message 
        WHERE to_user_id = #{userId}
        AND is_read = 0
        AND status = 1
    </select>

    <!-- 批量更新消息已读状态 -->
    <update id="updateBatchRead">
        UPDATE message 
        SET is_read = 1, updated_at = NOW()
        WHERE to_user_id = #{userId}
        AND id IN
        <foreach collection="messageIds" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <!-- 更新用户所有消息为已读 -->
    <update id="updateAllRead">
        UPDATE message 
        SET is_read = 1, updated_at = NOW()
        WHERE to_user_id = #{userId}
        AND is_read = 0
        AND status = 1
    </update>

</mapper> 